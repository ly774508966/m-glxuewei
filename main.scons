# accidental complexity:
# check command line variables
varcache = 'variables.cache'
var = Variables(varcache, ARGUMENTS)
var.AddVariables(
    ('ANDROID_KEY_STORE', 'Android keystore'),
    ('ANDROID_KEY_NAME', 'Android keyname'),
    ('ANDROID_NDK', 'Android NDK path'),
    ('ANDROID_SDK', 'Android SDK path'))
env = Environment(tools=[], variables=var)
# add required tool. See site_scons/site_tools/android.py
env.Tool('android')

# store command line options
var.Save(varcache, env)

# help hacks
if GetOption('help_variables'):
    print var.GenerateHelpText(env)
    Exit(0)
if GetOption('help'):
    Return()

# create the native library
lib = env.NdkBuild('libs/armeabi/libglbuffer.so',
                   app_root="#",
                   inputs=[Glob('jni/*.c'),
                           '#/jni/Android.mk'])

# builds the Java portion of the code and
# combines it with the native library
app = env.AndroidApp('GLBuffer', native_folder='#/libs')
env.Depends(app, lib)

# copy to the top level bin directory
env.Install('#bin', app)
